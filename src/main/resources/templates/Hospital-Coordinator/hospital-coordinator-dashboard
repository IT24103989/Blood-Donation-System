<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>LifeLine - Blood Management System</title>
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.4.0/css/all.min.css" rel="stylesheet">
    <style>
        :root {
            --primary: #dc2626;
            --primary-dark: #b91c1c;
            --primary-light: #fecaca;
            --secondary: #1e40af;
            --dark: #1f2937;
            --light: #f8fafc;
            --gray: #6b7280;
            --success: #059669;
            --warning: #d97706;
            --danger: #dc2626;
            --info: #0369a1;
        }

        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Inter', 'Segoe UI', system-ui, sans-serif;
            line-height: 1.6;
            color: var(--dark);
            background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
            min-height: 100vh;
        }

        .app-container {
            display: flex;
            min-height: 100vh;
        }

        /* Sidebar */
        .sidebar {
            width: 260px;
            background: linear-gradient(180deg, var(--primary) 0%, var(--primary-dark) 100%);
            color: white;
            padding: 1.5rem 0;
            box-shadow: 4px 0 10px rgba(0, 0, 0, 0.1);
            z-index: 100;
        }

        .logo {
            display: flex;
            align-items: center;
            padding: 0 1.5rem 2rem;
            border-bottom: 1px solid rgba(255, 255, 255, 0.1);
            margin-bottom: 1.5rem;
        }

        .logo-icon {
            font-size: 2rem;
            margin-right: 0.75rem;
        }

        .logo-text {
            font-size: 1.5rem;
            font-weight: 700;
        }

        .nav-links {
            list-style: none;
            padding: 0 1rem;
        }

        .nav-links li {
            margin-bottom: 0.5rem;
        }

        .nav-links a {
            display: flex;
            align-items: center;
            padding: 0.75rem 1rem;
            color: rgba(255, 255, 255, 0.8);
            text-decoration: none;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .nav-links a:hover, .nav-links a.active {
            background: rgba(255, 255, 255, 0.1);
            color: white;
        }

        .nav-links i {
            margin-right: 0.75rem;
            width: 20px;
            text-align: center;
        }

        /* Main Content */
        .main-content {
            flex: 1;
            display: flex;
            flex-direction: column;
        }

        .header {
            background: white;
            padding: 1rem 2rem;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.05);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .user-info {
            display: flex;
            align-items: center;
        }

        .user-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background: var(--primary);
            color: white;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 0.75rem;
            font-weight: bold;
        }

        .content {
            flex: 1;
            padding: 2rem;
            overflow-y: auto;
        }

        .page-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 2rem;
        }

        .page-title {
            font-size: 1.75rem;
            font-weight: 700;
            color: var(--dark);
        }

        .page-actions {
            display: flex;
            gap: 1rem;
        }

        /* Cards */
        .card {
            background: white;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.03);
            border: 1px solid #e5e7eb;
            overflow: hidden;
        }

        .card-header {
            padding: 1.5rem;
            border-bottom: 1px solid #e5e7eb;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .card-title {
            font-size: 1.25rem;
            font-weight: 600;
            color: var(--dark);
        }

        .card-body {
            padding: 1.5rem;
        }

        /* Tabs */
        .tabs {
            display: flex;
            border-bottom: 1px solid #e5e7eb;
            margin-bottom: 1.5rem;
        }

        .tab-button {
            padding: 0.75rem 1.5rem;
            background: none;
            border: none;
            cursor: pointer;
            font-size: 1rem;
            color: var(--gray);
            position: relative;
            transition: all 0.3s ease;
        }

        .tab-button.active {
            color: var(--primary);
            font-weight: 600;
        }

        .tab-button.active:after {
            content: '';
            position: absolute;
            bottom: -1px;
            left: 0;
            right: 0;
            height: 3px;
            background: var(--primary);
            border-radius: 3px 3px 0 0;
        }

        .tab-content {
            display: none;
        }

        .tab-content.active {
            display: block;
            animation: fadeIn 0.5s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        /* Forms */
        .form-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
            gap: 1.5rem;
        }

        .form-group {
            margin-bottom: 1.5rem;
        }

        .form-label {
            display: block;
            margin-bottom: 0.5rem;
            font-weight: 500;
            color: var(--dark);
        }

        .form-control {
            width: 100%;
            padding: 0.75rem 1rem;
            border: 1px solid #d1d5db;
            border-radius: 8px;
            font-size: 1rem;
            transition: all 0.3s ease;
        }

        .form-control:focus {
            outline: none;
            border-color: var(--primary);
            box-shadow: 0 0 0 3px var(--primary-light);
        }

        .form-actions {
            margin-top: 2rem;
            display: flex;
            justify-content: flex-end;
        }

        /* Buttons */
        .btn {
            display: inline-flex;
            align-items: center;
            justify-content: center;
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 8px;
            font-size: 1rem;
            font-weight: 500;
            cursor: pointer;
            transition: all 0.3s ease;
            gap: 0.5rem;
        }

        .btn-primary {
            background: var(--primary);
            color: white;
        }

        .btn-primary:hover {
            background: var(--primary-dark);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(220, 38, 38, 0.3);
        }

        .btn-secondary {
            background: var(--secondary);
            color: white;
        }

        .btn-outline {
            background: transparent;
            border: 1px solid #d1d5db;
            color: var(--gray);
        }

        .btn-outline:hover {
            background: #f9fafb;
        }

        .btn-sm {
            padding: 0.5rem 1rem;
            font-size: 0.875rem;
        }

        /* Search */
        .search-box {
            display: flex;
            margin-bottom: 1.5rem;
        }

        .search-box .form-control {
            border-radius: 8px 0 0 8px;
        }

        .search-btn {
            border-radius: 0 8px 8px 0;
            background: var(--primary);
            color: white;
            border: none;
            padding: 0 1.5rem;
            cursor: pointer;
        }

        /* Table */
        .table-container {
            overflow-x: auto;
            border-radius: 8px;
            border: 1px solid #e5e7eb;
        }

        table {
            width: 100%;
            border-collapse: collapse;
        }

        th, td {
            padding: 1rem;
            text-align: left;
            border-bottom: 1px solid #e5e7eb;
        }

        th {
            background: #f9fafb;
            font-weight: 600;
            color: var(--dark);
        }

        tr:hover {
            background: #f9fafb;
        }

        /* Status Badges */
        .status-badge {
            padding: 0.35rem 0.75rem;
            border-radius: 20px;
            font-size: 0.875rem;
            font-weight: 600;
        }

        .status-pending {
            background: #fef3c7;
            color: #92400e;
        }

        .status-processing {
            background: #dbeafe;
            color: #1e40af;
        }

        .status-completed {
            background: #d1fae5;
            color: #065f46;
        }

        .status-cancelled {
            background: #fee2e2;
            color: #991b1b;
        }

        /* Modal */
        .modal {
            display: none;
            position: fixed;
            z-index: 1000;
            left: 0;
            top: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.5);
            backdrop-filter: blur(4px);
        }

        .modal-content {
            background-color: white;
            margin: 5% auto;
            padding: 0;
            border-radius: 12px;
            width: 90%;
            max-width: 700px;
            position: relative;
            box-shadow: 0 20px 25px -5px rgba(0, 0, 0, 0.1);
            animation: modalSlideIn 0.3s ease;
        }

        @keyframes modalSlideIn {
            from { transform: translateY(-50px); opacity: 0; }
            to { transform: translateY(0); opacity: 1; }
        }

        .modal-header {
            padding: 1.5rem;
            border-bottom: 1px solid #e5e7eb;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .modal-title {
            font-size: 1.25rem;
            font-weight: 600;
        }

        .modal-close {
            color: #6b7280;
            font-size: 1.5rem;
            cursor: pointer;
            background: none;
            border: none;
        }

        .modal-close:hover {
            color: var(--dark);
        }

        .modal-body {
            padding: 1.5rem;
            max-height: 60vh;
            overflow-y: auto;
        }

        /* Stats */
        .stats-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
            gap: 1.5rem;
            margin-bottom: 2rem;
        }

        .stat-card {
            background: white;
            padding: 1.5rem;
            border-radius: 12px;
            box-shadow: 0 4px 6px rgba(0, 0, 0, 0.03);
            border: 1px solid #e5e7eb;
            display: flex;
            align-items: center;
        }

        .stat-icon {
            width: 60px;
            height: 60px;
            border-radius: 12px;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 1rem;
            font-size: 1.5rem;
        }

        .stat-icon.primary {
            background: var(--primary-light);
            color: var(--primary);
        }

        .stat-icon.success {
            background: #d1fae5;
            color: var(--success);
        }

        .stat-icon.warning {
            background: #fef3c7;
            color: var(--warning);
        }

        .stat-icon.info {
            background: #dbeafe;
            color: var(--info);
        }

        .stat-info h3 {
            font-size: 1.5rem;
            font-weight: 700;
            margin-bottom: 0.25rem;
        }

        .stat-info p {
            color: var(--gray);
            font-size: 0.875rem;
        }

        /* Responsive */
        @media (max-width: 768px) {
            .app-container {
                flex-direction: column;
            }

            .sidebar {
                width: 100%;
                height: auto;
            }

            .form-grid {
                grid-template-columns: 1fr;
            }

            .page-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 1rem;
            }

            .stats-grid {
                grid-template-columns: 1fr;
            }
        }
    </style>
</head>
<body>
<div class="app-container">
    <!-- Sidebar -->
    <div class="sidebar">
        <div class="logo">
            <div class="logo-icon">
                <i class="fas fa-tint"></i>
            </div>
            <div class="logo-text">LifeLine</div>
        </div>
        <ul class="nav-links">
            <li><a href="#"><i class="fas fa-home"></i> Dashboard</a></li>
            <li><a href="#" class="active"><i class="fas fa-hand-holding-medical"></i> Blood Requests</a></li>
            <li><a href="/"><i class="fas fa-sign-out-alt"></i> Logout</a></li>
        </ul>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <div class="header">
            <div class="header-title">
                <h2>Blood Request Management</h2>
            </div>
            <div class="user-info">
                <div class="user-avatar">AD</div>
                <div class="user-details">
                    <div class="user-name">Admin User</div>
                    <div class="user-role">System Administrator</div>
                </div>
            </div>
        </div>

        <div class="content">
            <!-- Stats Overview -->
            <div class="stats-grid">
                <div class="stat-card">
                    <div class="stat-icon primary">
                        <i class="fas fa-hand-holding-medical"></i>
                    </div>
                    <div class="stat-info">
                        <h3 id="total-requests">0</h3>
                        <p>Total Requests</p>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon warning">
                        <i class="fas fa-clock"></i>
                    </div>
                    <div class="stat-info">
                        <h3 id="pending-requests">0</h3>
                        <p>Pending</p>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon info">
                        <i class="fas fa-sync-alt"></i>
                    </div>
                    <div class="stat-info">
                        <h3 id="processing-requests">0</h3>
                        <p>Processing</p>
                    </div>
                </div>
                <div class="stat-card">
                    <div class="stat-icon success">
                        <i class="fas fa-check-circle"></i>
                    </div>
                    <div class="stat-info">
                        <h3 id="completed-requests">0</h3>
                        <p>Completed</p>
                    </div>
                </div>
            </div>

            <div class="card">
                <div class="card-header">
                    <div class="card-title">Blood Request Management</div>
                    <div class="card-actions">
                        <button class="btn btn-outline btn-sm" onclick="exportData()">
                            <i class="fas fa-download"></i> Export
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="tabs">
                        <button class="tab-button active" onclick="openTab('new-request')">
                            <i class="fas fa-plus-circle"></i> New Request
                        </button>
                        <button class="tab-button" onclick="openTab('track-requests')">
                            <i class="fas fa-list"></i> Track Requests
                        </button>
                    </div>

                    <div id="new-request" class="tab-content active">
                        <form id="blood-request-form">
                            <div class="form-grid">
                                <div class="form-group">
                                    <label for="hospital-name" class="form-label">Hospital Name</label>
                                    <input type="text" id="hospital-name" class="form-control" required>
                                </div>
                                <div class="form-group">
                                    <label for="requester-name" class="form-label">Requester Name</label>
                                    <input type="text" id="requester-name" class="form-control" required>
                                </div>
                                <div class="form-group">
                                    <label for="requester-contact" class="form-label">Contact Number</label>
                                    <input type="tel" id="requester-contact" class="form-control" required>
                                </div>
                                <div class="form-group">
                                    <label for="blood-type" class="form-label">Blood Type Needed</label>
                                    <select id="blood-type" class="form-control" required>
                                        <option value="">Select Blood Type</option>
                                        <option value="A+">A+</option>
                                        <option value="A-">A-</option>
                                        <option value="B+">B+</option>
                                        <option value="B-">B-</option>
                                        <option value="AB+">AB+</option>
                                        <option value="AB-">AB-</option>
                                        <option value="O+">O+</option>
                                        <option value="O-">O-</option>
                                    </select>
                                </div>
                                <div class="form-group">
                                    <label for="quantity" class="form-label">Quantity (units)</label>
                                    <input type="number" id="quantity" class="form-control" min="1" required>
                                </div>
                                <div class="form-group">
                                    <label for="urgency" class="form-label">Urgency Level</label>
                                    <select id="urgency" class="form-control" required>
                                        <option value="">Select Urgency</option>
                                        <option value="low">Low (Within 48 hours)</option>
                                        <option value="medium">Medium (Within 24 hours)</option>
                                        <option value="high">High (Within 6 hours)</option>
                                        <option value="critical">Critical (Immediately)</option>
                                    </select>
                                </div>
                            </div>
                            <div class="form-group">
                                <label for="patient-details" class="form-label">Patient Details/Case Information</label>
                                <textarea id="patient-details" class="form-control" rows="4"></textarea>
                            </div>
                            <div class="form-group">
                                <label for="needed-by" class="form-label">Needed By</label>
                                <input type="datetime-local" id="needed-by" class="form-control" required>
                            </div>
                            <div class="form-actions">
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-paper-plane"></i> Submit Request
                                </button>
                            </div>
                        </form>
                    </div>

                    <div id="track-requests" class="tab-content">
                        <div class="search-box">
                            <input type="text" id="search-request" class="form-control" placeholder="Search by request ID or hospital name">
                            <button class="search-btn" onclick="searchRequests()">
                                <i class="fas fa-search"></i>
                            </button>
                        </div>

                        <div class="table-container">
                            <table id="requests-table">
                                <thead>
                                <tr>
                                    <th>Request ID</th>
                                    <th>Hospital</th>
                                    <th>Requester</th>
                                    <th>Contact</th>
                                    <th>Blood Type</th>
                                    <th>Quantity</th>
                                    <th>Urgency</th>
                                    <th>Status</th>
                                    <th>Needed By</th>
                                    <th>Actions</th>
                                </tr>
                                </thead>
                                <tbody>
                                <!-- Table rows will be populated by JavaScript -->
                                </tbody>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Status Modal -->
<div id="status-modal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h3 class="modal-title">Request Status Details</h3>
            <button class="modal-close">&times;</button>
        </div>
        <div class="modal-body">
            <div id="status-details">
                <!-- Status details will be populated by JavaScript -->
            </div>
        </div>
    </div>
</div>

<script>
    const API_BASE = "http://localhost:8080/api/requests";
    let requests = [];
    let isEditMode = false;
    let currentEditId = null;

    function openTab(tabName) {
        const tabContents = document.getElementsByClassName("tab-content");
        for (let i = 0; i < tabContents.length; i++) {
            tabContents[i].classList.remove("active");
        }

        const tabButtons = document.getElementsByClassName("tab-button");
        for (let i = 0; i < tabButtons.length; i++) {
            tabButtons[i].classList.remove("active");
        }

        document.getElementById(tabName).classList.add("active");
        event.currentTarget.classList.add("active");

        if (tabName === "track-requests") {
            loadRequests();
        } else if (tabName === "new-request") {
            resetForm();
        }
    }

    // Form submission handler
    document.getElementById("blood-request-form").addEventListener("submit", function(e) {
        e.preventDefault();

        const formData = {
            hospitalName: document.getElementById("hospital-name").value,
            requesterName: document.getElementById("requester-name").value,
            contact: document.getElementById("requester-contact").value,
            bloodType: document.getElementById("blood-type").value,
            quantity: parseInt(document.getElementById("quantity").value, 10),
            urgency: document.getElementById("urgency").value,
            patientDetails: document.getElementById("patient-details").value,
            neededBy: new Date(document.getElementById("needed-by").value).toISOString(),
            status: "success"
        };

        if (isEditMode) {
            // Update existing request
            fetch(`${API_BASE}/${currentEditId}`, {
                method: "PUT",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(formData)
            })
                .then(response => {
                    if (!response.ok) throw new Error('Update failed');
                    return response.json();
                })
                .then(data => {
                    alert("Request updated successfully!");
                    resetForm();
                    loadRequests();
                    // Switch to track requests tab
                    document.querySelector('[onclick="openTab(\'track-requests\')"]').click();
                })
                .catch(error => {
                    alert("Failed to update request: " + error.message);
                });
        } else {
            // Create new request
            fetch(API_BASE, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify(formData)
            })
                .then(response => {
                    if (!response.ok) throw new Error('Creation failed');
                    return response.json();
                })
                .then(data => {
                    alert(`Request created successfully! Request ID: ${data.id}`);
                    resetForm();
                    loadRequests();
                    // Switch to track requests tab
                    document.querySelector('[onclick="openTab(\'track-requests\')"]').click();
                })
                .catch(error => {
                    alert("Failed to create request: " + error.message);
                });
        }
    });


    function createRequest() {
        const payload = {
            hospitalName: document.getElementById("hospital-name").value,
            requesterName: document.getElementById("requester-name").value,
            contact: document.getElementById("requester-contact").value,
            bloodType: document.getElementById("blood-type").value,
            quantity: parseInt(document.getElementById("quantity").value, 10),
            urgency: document.getElementById("urgency").value,
            patientDetails: document.getElementById("patient-details").value,
            neededBy: new Date(document.getElementById("needed-by").value).toISOString(),
            status: "pending",
            requestDate: new Date().toISOString()
        };

        console.log("Sending payload:", payload);

        fetch(API_BASE, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(payload)
        })
            .then(r => {
                if (!r.ok) throw r;
                return r.json();
            })
            .then(data => {
                alert(`Request submitted successfully! Your request ID is: ${data.id}`);
                resetForm();
                loadRequests();
                document.querySelector('.tab-button[onclick*="track-requests"]').click();
            })
            .catch(async err => {
                let message = "Failed to submit";
                try {
                    const body = await err.json();
                    message = body.message || JSON.stringify(body);
                    console.error("Error details:", body);
                } catch (_) {
                    console.error("Error:", err);
                }
                alert(message);
            });
    }

    function updateRequest(requestId) {
        const payload = {
            hospitalName: document.getElementById("hospital-name").value,
            requesterName: document.getElementById("requester-name").value,
            contact: document.getElementById("requester-contact").value,
            bloodType: document.getElementById("blood-type").value,
            quantity: parseInt(document.getElementById("quantity").value, 10),
            urgency: document.getElementById("urgency").value,
            patientDetails: document.getElementById("patient-details").value,
            neededBy: new Date(document.getElementById("needed-by").value).toISOString(),
            status: "pending"
        };

        fetch(`${API_BASE}/${requestId}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify(payload)
        })
            .then(r => {
                if (!r.ok) throw r;
                return r.json();
            })
            .then(data => {
                alert('Request updated successfully!');
                resetForm();
                loadRequests();
                document.querySelector('.tab-button[onclick*="track-requests"]').click();
            })
            .catch(async err => {
                let message = "Failed to update request";
                try {
                    const body = await err.json();
                    message = body.message || JSON.stringify(body);
                    console.error("Error details:", body);
                } catch (_) {
                    console.error("Error:", err);
                }
                alert(message);
            });
    }

    function resetForm() {
        document.getElementById("blood-request-form").reset();
        isEditMode = false;
        currentEditId = null;

        // Reset submit button text
        const submitButton = document.querySelector('.btn.btn-primary');
        submitButton.innerHTML = '<i class="fas fa-paper-plane"></i> Submit Request';
    }

    function populateRequestsTable(filteredRequests = null) {
        const tableBody = document.querySelector("#requests-table tbody");
        tableBody.innerHTML = "";

        const requestsToShow = filteredRequests || requests;

        requestsToShow.forEach(request => {
            const row = document.createElement("tr");
            const neededByDate = new Date(request.neededBy).toLocaleString();
            const requestDate = new Date(request.requestDate).toLocaleString();

            let statusClass = "";
            switch(request.status) {
                case "pending": statusClass = "status-pending"; break;
                case "processing": statusClass = "status-processing"; break;
                case "completed": statusClass = "status-completed"; break;
                case "cancelled": statusClass = "status-cancelled"; break;
            }

            row.innerHTML = `
            <td>${request.id}</td>
            <td>${request.hospitalName}</td>
            <td>${request.requesterName}</td>
            <td>${request.contact}</td>
            <td>${request.bloodType}</td>
            <td>${request.quantity} units</td>
            <td>${request.urgency}</td>
            <td><div class="status-badge ${statusClass}">${request.status}</div></td>
            <td>${neededByDate}</td>
            <td>
                <button class="btn btn-sm btn-outline" onclick="viewRequest('${request.id}')">
                    <i class="fas fa-eye"></i> View
                </button>
                ${request.status === "pending" ? `
                    <button class="btn btn-sm btn-outline" onclick="editRequest('${request.id}')">
                        <i class="fas fa-edit"></i> Edit
                    </button>
                    <button class="btn btn-sm btn-outline" onclick="cancelRequest('${request.id}')">
                        <i class="fas fa-times"></i> Cancel
                    </button>
                ` : ''}
            </td>
        `;

            tableBody.appendChild(row);
        });

        updateStats();
    }

    function searchRequests() {
        const searchTerm = document.getElementById("search-request").value.trim();
        if (!searchTerm) {
            loadRequests();
            return;
        }

        fetch(`${API_BASE}/search?term=${encodeURIComponent(searchTerm)}`)
            .then(r => r.json())
            .then(data => {
                requests = data;
                populateRequestsTable();
            })
            .catch(() => alert("Search failed"));
    }

    function viewRequest(requestId) {
        const request = requests.find(req => String(req.id) === String(requestId));
        if (!request) { return; }

        const modal = document.getElementById("status-modal");
        const statusDetails = document.getElementById("status-details");

        const requestDate = new Date(request.requestDate).toLocaleString();
        const neededByDate = new Date(request.neededBy).toLocaleString();

        statusDetails.innerHTML = `
                <div class="status-detail-item">
                    <strong>Request ID:</strong> ${request.id}
                </div>
                <div class="status-detail-item">
                    <strong>Hospital:</strong> ${request.hospitalName}
                </div>
                <div class="status-detail-item">
                    <strong>Requester:</strong> ${request.requesterName}
                </div>
                <div class="status-detail-item">
                    <strong>Contact:</strong> ${request.contact}
                </div>
                <div class="status-detail-item">
                    <strong>Blood Type:</strong> ${request.bloodType}
                </div>
                <div class="status-detail-item">
                    <strong>Quantity:</strong> ${request.quantity} units
                </div>
                <div class="status-detail-item">
                    <strong>Urgency:</strong> ${request.urgency.charAt(0).toUpperCase() + request.urgency.slice(1)}
                </div>
                <div class="status-detail-item">
                    <strong>Patient Details:</strong> ${request.patientDetails || 'N/A'}
                </div>
                <div class="status-detail-item">
                    <strong>Request Date:</strong> ${requestDate}
                </div>
                <div class="status-detail-item">
                    <strong>Needed By:</strong> ${neededByDate}
                </div>
                <div class="status-timeline">
                    <h4>Request Timeline</h4>
                    <div class="status-event">
                        <strong>Request Submitted</strong>
                        <p>${requestDate}</p>
                    </div>
                    ${request.status !== "pending" ? `
                    <div class="status-event">
                        <strong>Request Processing</strong>
                        <p>${new Date(new Date(request.requestDate).getTime() + 30*60000).toLocaleString()}</p>
                    </div>
                    ` : ""}
                    ${request.status === "completed" ? `
                    <div class="status-event">
                        <strong>Request Fulfilled</strong>
                        <p>${new Date(new Date(request.requestDate).getTime() + 120*60000).toLocaleString()}</p>
                    </div>
                    ` : ""}
                </div>
            `;

        modal.style.display = "block";
    }

    function editRequest(requestId) {
        const request = requests.find(req => String(req.id) === String(requestId));
        if (!request) return;

        // Switch to New Request tab
        openTab('new-request');

        // Populate form with existing data
        document.getElementById('hospital-name').value = request.hospitalName;
        document.getElementById('requester-name').value = request.requesterName;
        document.getElementById('requester-contact').value = request.contact;
        document.getElementById('blood-type').value = request.bloodType;
        document.getElementById('quantity').value = request.quantity;
        document.getElementById('urgency').value = request.urgency;
        document.getElementById('patient-details').value = request.patientDetails || '';

        // Format date for datetime-local input
        const neededByDate = new Date(request.neededBy);
        document.getElementById('needed-by').value = neededByDate.toISOString().slice(0, 16);

        // Change submit button text and store edit mode state
        const submitButton = document.querySelector('.btn.btn-primary');
        submitButton.innerHTML = '<i class="fas fa-save"></i> Update Request';

        // Set edit mode
        isEditMode = true;
        currentEditId = requestId;

        // Scroll to the form
        document.getElementById('blood-request-form').scrollIntoView({ behavior: 'smooth' });
    }

    function cancelRequest(requestId) {
        if (confirm("Are you sure you want to cancel this request?")) {
            fetch(`${API_BASE}/${requestId}`, { method: "DELETE" })
                .then(r => {
                    if (!r.ok) throw new Error();
                    alert("Request cancelled successfully.");
                    loadRequests();
                })
                .catch(() => alert("Failed to cancel request."));
        }
    }

    function loadRequests() {
        console.log("Loading requests from API...");
        fetch(API_BASE)
            .then(r => {
                console.log("API Response status:", r.status);
                if (!r.ok) throw new Error('Network response was not ok');
                return r.json();
            })
            .then(data => {
                console.log("Received data:", data);
                requests = data;
                populateRequestsTable();
            })
            .catch((error) => {
                console.error("Error loading requests:", error);
                requests = [];
                populateRequestsTable();
            });
    }

    function updateStats() {
        const total = requests.length;
        const pending = requests.filter(r => r.status === 'pending').length;
        const processing = requests.filter(r => r.status === 'processing').length;
        const completed = requests.filter(r => r.status === 'completed').length;

        document.getElementById('total-requests').textContent = total;
        document.getElementById('pending-requests').textContent = pending;
        document.getElementById('processing-requests').textContent = processing;
        document.getElementById('completed-requests').textContent = completed;
    }

    function exportData() {
        alert("Export functionality would be implemented here");
    }

    // Modal close functionality
    document.querySelector(".modal-close").addEventListener("click", function() {
        document.getElementById("status-modal").style.display = "none";
    });

    window.addEventListener("click", function(event) {
        const modal = document.getElementById("status-modal");
        if (event.target === modal) {
            modal.style.display = "none";
        }
    });

    // Initialize the page
    document.addEventListener("DOMContentLoaded", function() {
        if (document.getElementById("track-requests").classList.contains("active")) {
            loadRequests();
        }
    });
</script>
</body>
</html>
